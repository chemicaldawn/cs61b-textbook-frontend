---
import { getCollection } from "astro:content";
import { string } from "astro:schema";
import { textChangeRangeIsUnchanged } from "typescript";

const { section } = Astro.props

class SidebarItem {

    chapter : string;
    section : string;
    title : string;
    slug : string;
    isChapter : boolean;
    startsActive : boolean;

    classList : string;
    url : string;
    pushUrl : string;
    pagemapUrl : string;

    constructor(chapter : string, section : string, title: string, slug : string, isChapter : boolean, startsActive : boolean) {
        this.chapter = chapter;
        this.section = section;
        this.title = title;
        this.slug = slug;
        this.isChapter = isChapter;
        this.startsActive = startsActive;

        this.classList = "sidebar-item"
        this.pushUrl = `/${chapter}/${slug}`
        this.url = "/partials" + this.pushUrl
        this.pagemapUrl = "/pagemap" + this.pushUrl

        if (!this.isChapter) {
            this.classList += " section"
        }

        if (startsActive) {
            this.classList += " active"
        }
    }
}

const items : SidebarItem[] = []
const paths = (await getCollection('textbook')).map((page) => {
    
    let chapterName = String(page.data.section).substring(0,1)
    let sectionName = String(page.data.section)
    let isChapter = !String(sectionName).includes(".")

    items.push(new SidebarItem(chapterName, sectionName, page.data.title, page.id, isChapter, sectionName === section))
})

items.sort((a : SidebarItem, b : SidebarItem) => {
    if (a.chapter != b.chapter) {
        return Number(a.chapter) - Number(b.chapter)
    } else if (a.isChapter || a.isChapter) {
        return Number(a.isChapter) - Number(b.isChapter)
    } else {
        return Number(a.section) - Number(b.section)
    }
})
---
<div class="sidebar-title">Table of Contents</div>
{items.map((item : SidebarItem) => 
    <div class={item.classList}
        query-url={item.url} push-url={item.pushUrl} pagemap-url={item.pagemapUrl}
    >
        <div class="section">{item.section}</div>
        <div class="name">{item.title}</div>
    </div>
)}

<script>
    const sidebarItems = document.querySelectorAll(".sidebar-item")

    const content = document.querySelector("div#content")
    const pagemap = document.querySelector("div#pagemap")

    function clearActive() {
        sidebarItems.forEach((item) => {
            item.classList.remove("active")
        })
    }

    sidebarItems.forEach((item) => {
        item.addEventListener("click", () => {
            clearActive()
            item.classList.add("active")
            content?.classList.add("hidden")

            setTimeout(() => {
                $.get(item.getAttribute("query-url")!, (data) => {
                    content!.innerHTML = data

                    history.pushState("","",item.getAttribute("push-url"))

                    content?.scrollTo(0,0)
                    content?.classList.remove("hidden")
                })

                $.get(item.getAttribute("pagemap-url")!, (data) => {
                    pagemap!.innerHTML = data
                })
            }, 100)
        })
    })
</script>